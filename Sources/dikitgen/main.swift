import Foundation
import DIKit
import SourceKittenFramework
import Stencil

struct A: Injectable {
    struct Dependency {}
    init(dependency: Dependency) {}
}

struct B: Injectable {
    struct Dependency {
        let ba: A
    }
    
    init(dependency: Dependency) {}
}

struct C: Injectable {
    struct Dependency {
        let ca: A
        let cd: D
    }
    
    init(dependency: Dependency) {}
}

struct D {}

protocol DemoResolver: DIKit.Resolver {
    func provideD() -> D
}

let file = File(path: #file)!
let structure = Structure(file: file)
let injectableTypeNodes = structure.substructures
    .flatMap { Type(structure: $0, file: file) }
    .flatMap(Node.init(injectableType:))

let resolvers = structure.substructures
    .flatMap { Type(structure: $0, file: file) }
    .flatMap { Resolver(type: $0, injectableTypeNodes: injectableTypeNodes ) }

let context = [
    "resolvers": resolvers,
]

let template = Template(templateString: """
//
//  Resolver.swift
//  Generated by dikitgen.
//
{% for resolver in resolvers %}
extension {{ resolver.name }} { {% for factoryMethod in resolver.factoryMethods %}
    func {{ factoryMethod.name }}() -> {{ factoryMethod.returnTypeName }} {
        {% for line in factoryMethod.bodyLines %}{{ line }}{% if not forloop.last %}
        {% endif %}{% endfor %}
    }{% if not forloop.last %}
    {% endif %}{% endfor %}
}
{% endfor %}
""")

let rendered = try template.render(context)
print(rendered)

