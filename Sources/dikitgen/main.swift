import Foundation
import DIKit
import SourceKittenFramework
import Stencil

struct A: Injectable {
    struct Dependency {}
    init(dependency: Dependency) {}
}

struct B: Injectable {
    struct Dependency {
        let ba: A
    }
    
    init(dependency: Dependency) {}
}

struct C: Injectable {
    struct Dependency {
        let ca: A
        let cd: D
    }
    
    init(dependency: Dependency) {}
}

struct D {}

protocol Resolver: DIKit.Resolver {
    func provideD() -> D
}

let file = File(path: #file)!
let structure = Structure(file: file)

let template = Template(templateString: """
//
//  Resolver.swift
//  Generated by dikitgen.
//
""")

let rendered = try template.render()
print(rendered)

