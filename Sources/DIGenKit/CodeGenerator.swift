//
//  CodeGenerator.swift
//  dikitgenTests
//
//  Created by Yosuke Ishikawa on 2017/09/16.
//

import Foundation
import SourceKittenFramework
import Stencil

public final class CodeGenerator {
    let context: [String: Any]

    public init(path: String) {
        let types = Array(files(atPath: path)
            .map { file in
                return Structure(file: file)
                    .substructures
                    .flatMap { Type(structure: $0, file: file) }
            }
            .joined())

        let injectableTypeNodes = types.flatMap(Node.init(injectableType:))
        let resolvers = types.flatMap { Resolver(type: $0, injectableTypeNodes: injectableTypeNodes ) }
        context = ["resolvers": resolvers]
    }

    public func generate() throws -> String {
        let template = Template(templateString: """
            //
            //  Resolver.swift
            //  Generated by dikitgen.
            //
            {% for resolver in resolvers %}
            extension {{ resolver.name }} {
            {% for factoryMethod in resolver.factoryMethods %}
                func {{ factoryMethod.name }}() -> {{ factoryMethod.returnTypeName }} {
                    {% for line in factoryMethod.bodyLines %}{{ line }}{% if not forloop.last %}
                    {% endif %}{% endfor %}
                }
            {% endfor %}
            }
            {% endfor %}
            """)

        return try template.render(context)
    }
}

private func files(atPath path: String) -> [File] {
    let url = URL(fileURLWithPath: path)
    let fileManager = FileManager.default

    var isDirectory = false as ObjCBool
    if fileManager.fileExists(atPath: url.path, isDirectory: &isDirectory) && !isDirectory.boolValue {
        if let file = File(path: url.path) {
            return [file]
        }
    }

    let enumerator = fileManager.enumerator(atPath: path)
    var files = [] as [File]
    while let subpath = enumerator?.nextObject() as? String {
        let url = url.appendingPathComponent(subpath)
        guard url.lastPathComponent != ".DS_Store" else {
            continue
        }

        var isDirectory = false as ObjCBool
        if fileManager.fileExists(atPath: url.path, isDirectory: &isDirectory) {
            if isDirectory.boolValue {
                files.append(contentsOf: DIGenKit.files(atPath: url.path))
            } else if let file = File(path: url.path) {
                files.append(file)
            }
        }
    }

    return files
}
