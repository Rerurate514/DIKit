//
//  Tests.swift
//  dikitgenTests
//
//  Created by Yosuke Ishikawa on 2017/09/16.
//

import XCTest
import DIGenKit
import DIKit

struct A: Injectable {
    struct Dependency {}
    init(dependency: Dependency) {}
}

struct B: Injectable {
    struct Dependency {
        let ba: A
    }

    init(dependency: Dependency) {}
}

struct C: Injectable {
    struct Dependency {
        let ca: A
        let cd: D
    }

    init(dependency: Dependency) {}
}

struct D {}

protocol DemoResolver: DIKit.Resolver {
    func provideD() -> D
}

final class Tests: XCTestCase {
    func test() {
        let generator = CodeGenerator(path: #file)
        let contents = try! generator.generate().trimmingCharacters(in: .whitespacesAndNewlines)
        XCTAssertEqual(contents, """
            //
            //  Resolver.swift
            //  Generated by dikitgen.
            //

            extension DemoResolver {

                func makeA() -> A {
                    return A(dependency: .init())
                }

                func makeB() -> B {
                    let a = makeA()
                    return B(dependency: .init(ba: a))
                }

                func makeD() -> D {
                    return provideD()
                }

                func makeC() -> C {
                    let a = makeA()
                    let d = makeD()
                    return C(dependency: .init(ca: a, cd: d))
                }

            }
            """)
    }
}
